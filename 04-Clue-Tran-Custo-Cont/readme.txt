CRM:
Day02(2021-06-25):
    1.编写CRM.js工具用于表单组件校验
    2.login.jsp中完成登录操作
        1)组件验非空
        2)ajax通过post方式发起请求
        3)如果登录操作中后段和前端都成功则跳转到workbench/index页面
        4)失败时获取msg,给出相应提示
    3.编写LoginException,用于获取登录失败时的信息
    4.UserDao增加queryUser方法:select * from tbl_user where loginAct=#{loginAct} and loginPwd=#{loginPwd}
    5.UserServiceImpl调用调用UserDao的queryUser方法后
        继续校验账户密码是否匹配,是否为锁定状态,是否允许IP地址,是否过有效期
            public User login(User user, String ip) throws LoginException
        有异常时往上抛,以至于UserController能获取到登录失败的原因
    6.USerController中编写方法处理登录业务
        public Map addStudent(User user, HttpServletRequest request)
      登录成功时放回值map中只有success, 失败时有success以及msg
------------------------------------------------------------------------------------------------------------------

Day03(2021-07-21):
    1.添加LoginFilter,解决非法访问问题
    2.整理java/setting的dao、controller、service
    3.三个配置文件配置workbench相关的dao、controller、service
------------------------------------------------------------------------------------------------------------------

Day04(2021-07-22):
    1.编写市场活动页面jsp
    2.编写创建Activity模态窗口以及后端逻辑(getUserList.do、save.do)
    3.编写分页查询Activity(pageList.do)
    4.建立PaginationVO用于接收页对象
------------------------------------------------------------------------------------------------------------------

Day05(2021-07-23):
    1.编写多条件动态查询Activity
    2.编写删除Activity模态窗口以及后端逻辑(delete.do)
       (这里涉及事务,先删除activity_remark表数据再删除activity表数据)
    3.编写修改Activity模态窗口以及后端逻辑(delete.do、update.do)
-----------------------------------------------------------------------------------------------------------------

Day05(2021-07-24):
    1.编写Activity详情页中市场活动的删、改操作
    2.编写Activity详情页中备注的增删查改操作
        (这里的删除操作和更新操作使用尽量不过后台的方式，所以有些地方逻辑不是很好，后期可以改回过后台方式)
-----------------------------------------------------------------------------------------------------------------

Day06(2021-07-25):
    1.导入“线索”、“客户”、“联系人”、“交易”相关表
    2.将 部分  “线索”、“客户”、“联系人”、“交易”模块的html修改为jsp，解决404错误
    3.搭建“线索”、“客户”、“联系人”、“交易”相关后端结构(domain,dao,service,controller)
    4.编写监听器, 实现在启动服务器时从数据库中取出数据字典到上下文对象(ServletContext)中            //难点，搞了大半天
        (该监听器在web.xml中声明的位置必须放在spring的声明后面)

-----------------------------------------------------------------------------------------------------------------

Day07(2021-07-26):
    1.线索模块的添加、编辑、删除操作
    2.线索的详情页模块的备注相关操作
    3.线索详情页的市场活动相关操作(关联市场活动与解绑市场活动)
    4.第3步中绑定市场活动时，加载的市场活动列表必须是没有关联绑定关系的
-----------------------------------------------------------------------------------------------------------------

Day08(2021-08-01):
    1.线索转换页面的前端页面的编写
    2.线索转换页面的后端编写

-----------------------------------------------------------------------------------------------------------------

Day08(2021-08-02):
    建立阶段与可能性的配置文件(Stage2Possibility.properties)
    (
        为什么建立配置文件而不是建数据库表?
         1.数据量不是很大
         2.这是一种键值对的对于关系
         3.比较稳定,数据不会有很多的变动
    )
    设立在服务器缓存,服务器启动时解析该文件,将该文件的键值对关系处理为Java中键值对关系(map)

-----------------------------------------------------------------------------------------------------------------

Day09(2021-08-03):
    1.交易模块新增
    2.交易模块的查询列表
    3.交易模块编辑

-----------------------------------------------------------------------------------------------------------------

Day10(2021-08-05):
    1.交易模块详情页(可变更阶段)
    2.统计图表中的交易统计图标模块
